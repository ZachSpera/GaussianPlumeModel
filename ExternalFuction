function [Concentration] = ComputationalCode(U0,Z0,Z1,ISR,X,V,R2,P,Ta,Ts,Y,S)

% Described variables to make it easier to understand 
%U0 = Wind speed at measured height (Z0) (m/s)
%Z0 = Height at which wind speed was measured (m)
%Z1 = Stack height (m)
%ISR = Incoming solar radiation value (1-3)
%X = distance directly downwind (m)
%Y = distance to the side (m)
%V = Stack velocity, how fast the pollutant is ejected (m/sec)
%R2 = Diameter of stack (m)
%P = Pressure (kPa)
%Ta = Ambient temperature (k)
%Ts = Stack temperature (k)
%S = TPS emission rate (mass/time)


%Initialize lowercase p as standard deviation of plume and is .25 
p = .25;
%Calculation for wind speed at stack
U1 = U0*(Z1/Z0)^p;
%Calculation for speed at ground 
Ug = U0*(Z1/10)^p;
%Initializing class chart
ClassTable = ['A', 'B', 'B' ; 'B', 'B', 'C' ; 'B', 'C', 'C', ; 'C', 'D', 'D', ; 'C', 'D', 'D'];
row = 0;
%Finding Row 
if Ug < 2
    row = 0;
elseif Ug < 3 && Ug > 2
    row = 2 ;
elseif Ug < 4 && Ug > 3
    row = 3;
elseif Ug < 5 && Ug > 4
    row = 4;
else  
    row = 5;
end

%Sets Stability class to the rows and ISR (1-3)
StabilityClass = ClassTable(row,ISR);

% Determains which part of table to use 
if X < 1 
    dispersionTable = [213 440.8 1.941 9.27; 
                       156 100.6 1.149 3.3;
                       104 61 0.911 0;
                       68 33.2 0.725 -1.7;
                       50.5 22.8 0.678 1.3;
                       34 14.35 0.74 -0.35];
else 
    dispersionTable = [213 459.7 2.094 -9.6;
                       156 108.2 1.098 2;
                       104 61 0.911 0;
                       68 44.5 0.516 -13;
                       50 55.4 0.305 -34;
                       34 62.6 0.18 -48.6];
end 
DispersionRow = 0;
if StabilityClass == 'A'
    DispersionRow = 1 ;
elseif StabilityClass == 'B'
    DispersionRow = 2;
elseif StabilityClass == 'C'
    DispersionRow = 3;
elseif StabilityClass == 'D'
    DispersionRow = 4;
end

%Finding coefficents for a-f
a = dispersionTable(DispersionRow,1);
c = dispersionTable(DispersionRow,2);
d = dispersionTable(DispersionRow,3);
f = dispersionTable(DispersionRow,4);

%Calculating Sigmas 
sigmaz = c * X^d + f ;
sigmay = a*X^0.894;

%Calculating the change in effective height 
delta_h = (V * R2 / U1) * (1.5 + 0.0268 * P * R2 * ((Ts - Ta) / Ts));

%Calculating effective stack height 
H = Z0 + delta_h;

Concentration = (S / (pi * sigmay * sigmaz * U1)) * exp(-Y^2 / (2 * sigmay^2)) * exp(-H^2 / (2 * sigmaz^2));
end

%TESTER
%[Concentration] = ComputationalCode(3.2,100,75,1,2000,12,1.5,100,301.15,895.15,500,8.2e9)
%disp(Concentration)



